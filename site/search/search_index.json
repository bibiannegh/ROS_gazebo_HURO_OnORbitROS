{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OnOrbitROS","text":"<p>OnOrbitROS is a unified open-source framework for space-robotics simulations. It is based on Robot Operating System (ROS) and includes and reproduces the principal environmental conditions that eventual space robots and manipulators could experience in an on-orbit servicing scenario.</p>"},{"location":"#about-us","title":"About Us","text":"<p>Developed by Human Robotics (HURO) group, University of Alicante, Spain. </p> <p>Space robotics broadly encompasses the application of robots and autonomous systems for operations in the space environment. HURO Space Robotics section investigates the development of robotic systems and their control for performing tasks in space.</p> <p>You can find more information about this project and other works in our website: HURO Space Robotics</p>"},{"location":"Install/","title":"Installation Guide","text":"<p>OnOrbitROS framework can be found on this GitHub. There you will find the packages to install in your ROS environment as well as different guided examples to discover the functionalities OnOrbitROS offers. With this framework it is also possible to create new projects from the existing ones or from scrath.</p>"},{"location":"Install/#ros-distribution","title":"ROS Distribution","text":"<p>The project has been developed in ROS Noetic (Ubuntu 20.04). The intallation guidelines can be found here. ROS offers many tutorials and guides to help you set up and work with your environments and projects, that can be accessed through ROS Wiki.</p>"},{"location":"Install/#gazebo-simulator","title":"Gazebo Simulator","text":"<p>Gazebo is an open-source and free simulation tool specifically designed for fast and efficient test development. It has been selected as it can simulate complex 3D environments where each element possesses properties such as mass, velocity, and friction, and can accurately represent the dynamics and interations of space robots in complex 3D settings, so it is possible to create a realistic simulation of on-orbit conditions. Install here.</p> <p>There is high interation of Gazebo within ROS: simulations are generated from an XML file based on the SDF description language (extension of URDF that ROS uses for robot description) for quick and easy creations and configurations; and it is possible to include additional plugins to extend its functionalities. </p> <p>OnOrbitROS includes different plugins to simulate the on-orbit-specific conditions (using existing standard and available ROS/Gazebo packages to develop complex tasks). Also, Gazebo integrates interfaces to use multiple physics engines such as Open Dynamics Engine, Bullet, Simbody, Dynamic Animation and Robotics Toolkit (DART).</p>"},{"location":"Install/#onorbitros-framework","title":"OnOrbitROS Framework","text":"<p>Import the ROS framework from the GitHub (found here). </p> <ol> <li>Install ROS and create an ROS environment (or use a previous one). The tutorial for doing so can be found here.</li> <li>Download the framework with <code>git clone</code> or manually into your desired ROS environment.</li> <li>Build the environment with <code>catkin_make</code> or <code>catkin_make_isolated</code>.</li> <li>Solve any dependency problems that might occur. See Other packages for help.</li> </ol> <p>You can now start working with the framework. </p>"},{"location":"Install/#examples-of-applications","title":"Examples of Applications","text":"<p>In case you would like to install the example cases: </p> <ol> <li>Download the example you want with <code>git clone</code> or manually into the folder <code>orbit_ws/src</code>.</li> <li>Build the environment with <code>catkin_make</code> or <code>catkin_make_isolated</code>.</li> <li>Execute the <code>.launch</code> corresponding to that example. See the specific example documentation for that (found in Examples of Applications)</li> </ol>"},{"location":"Install/#other-packages","title":"Other packages","text":"<p>In addition to the Ubuntu installation with its packages, it might be necessary to manually install this other packages. This is because OnOrbitROS takes advantages of the number of packages already developed in ROS to improve its functionalities.</p> <p>Packages for the controllers:</p> <ul> <li>Controller Manager: <code>$ sudo apt-get install ros-noetic-controller-manager</code></li> <li>Joint State Controller:    <code>$ sudo apt-get install ros-noetic-joint-state-controller</code></li> <li>Effort Controller: <code>$ sudo apt-get install ros-noetic-effort-controller</code></li> <li>Position Controllers:    <code>$ sudo apt-get install ros-noetic-position-controllers</code> </li> </ul>"},{"location":"arquitechture/","title":"Architecture of OnOrbitROS","text":"<p>OnOrbitROS serves as a foundational platform for the study and development of on-orbit applications, leveraging the powerful combination of ROS and Gazebo for hyper-realistic simulations.</p> <p>For extended information about this framework, its architecture and some applications go to doi.</p> <pre><code>Jos\u00e9 L. Ram\u00f3n, Jorge Pomares, Leonard Felicetti,\nTask space control for on-orbit space robotics using a new ROS-based framework,\nSimulation Modelling Practice and Theory,\nVolume 127,\n2023,\n102790,\nISSN 1569-190X,\nhttps://doi.org/10.1016/j.simpat.2023.102790\n(https://www.sciencedirect.com/science/article/pii/S1569190X23000679)\n</code></pre> <p>Here you can find the architecture of the framework. In the OnOrbitROS workspace installed (see Installation Guide for more info) you will find many pacakges, which are shown in this image. </p> <p></p>"},{"location":"examples/","title":"Examples of Applications using OnOrbitROS","text":"<p>In this section you can find different examples that exploit OnOrbitROS functionalities. They can serve as a guide to develop your own application, based on this or from scratch.</p>"}]}